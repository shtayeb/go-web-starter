// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: account.sql

package db_sqlite

import (
	"context"
	"database/sql"
	"time"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (account_id, user_id, password, provider_id)
VALUES ( ?, ?, ?, ?)
ON CONFLICT(user_id, provider_id) DO NOTHING
RETURNING id, account_id, user_id, provider_id
`

type CreateAccountParams struct {
	AccountID  string
	UserID     int64
	Password   sql.NullString
	ProviderID sql.NullString
}

type CreateAccountRow struct {
	ID         int64
	AccountID  string
	UserID     int64
	ProviderID sql.NullString
}

// (Removed; use UpdateAccountPassword)
func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (CreateAccountRow, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.AccountID,
		arg.UserID,
		arg.Password,
		arg.ProviderID,
	)
	var i CreateAccountRow
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.UserID,
		&i.ProviderID,
	)
	return i, err
}

const deleteAccountsByUserId = `-- name: DeleteAccountsByUserId :exec
DELETE FROM accounts WHERE user_id = ?
`

func (q *Queries) DeleteAccountsByUserId(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccountsByUserId, userID)
	return err
}

const getAccountById = `-- name: GetAccountById :one
SELECT id, account_id, provider_id, user_id, access_token, refresh_token, id_token, access_token_expires_at, refresh_token_expires_at, scope, password, created_at, updated_at FROM accounts WHERE id = ?
`

func (q *Queries) GetAccountById(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountById, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.ProviderID,
		&i.UserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.IDToken,
		&i.AccessTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.Scope,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountByUserId = `-- name: GetAccountByUserId :many
SELECT id,
       account_id,
       user_id,
       provider_id,
       access_token,
       refresh_token,
       access_token_expires_at,
       created_at,
       updated_at
FROM accounts
WHERE user_id = ?
`

type GetAccountByUserIdRow struct {
	ID                   int64
	AccountID            string
	UserID               int64
	ProviderID           sql.NullString
	AccessToken          sql.NullString
	RefreshToken         sql.NullString
	AccessTokenExpiresAt sql.NullTime
	CreatedAt            time.Time
	UpdatedAt            time.Time
}

// Return multiple accounts for a user and only known columns
func (q *Queries) GetAccountByUserId(ctx context.Context, userID int64) ([]GetAccountByUserIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getAccountByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAccountByUserIdRow
	for rows.Next() {
		var i GetAccountByUserIdRow
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.UserID,
			&i.ProviderID,
			&i.AccessToken,
			&i.RefreshToken,
			&i.AccessTokenExpiresAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAccountByUserIdAndProvider = `-- name: GetAccountByUserIdAndProvider :one
SELECT id, account_id, user_id, provider_id
FROM accounts
WHERE user_id = ? AND provider_id = ?
`

type GetAccountByUserIdAndProviderParams struct {
	UserID     int64
	ProviderID sql.NullString
}

type GetAccountByUserIdAndProviderRow struct {
	ID         int64
	AccountID  string
	UserID     int64
	ProviderID sql.NullString
}

func (q *Queries) GetAccountByUserIdAndProvider(ctx context.Context, arg GetAccountByUserIdAndProviderParams) (GetAccountByUserIdAndProviderRow, error) {
	row := q.db.QueryRowContext(ctx, getAccountByUserIdAndProvider, arg.UserID, arg.ProviderID)
	var i GetAccountByUserIdAndProviderRow
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.UserID,
		&i.ProviderID,
	)
	return i, err
}

const updateAccountOAuthTokens = `-- name: UpdateAccountOAuthTokens :exec
UPDATE accounts
SET access_token = ?,
    refresh_token = ?,
    access_token_expires_at = ?
WHERE user_id = ? AND provider_id = ?
`

type UpdateAccountOAuthTokensParams struct {
	AccessToken          sql.NullString
	RefreshToken         sql.NullString
	AccessTokenExpiresAt sql.NullTime
	UserID               int64
	ProviderID           sql.NullString
}

func (q *Queries) UpdateAccountOAuthTokens(ctx context.Context, arg UpdateAccountOAuthTokensParams) error {
	_, err := q.db.ExecContext(ctx, updateAccountOAuthTokens,
		arg.AccessToken,
		arg.RefreshToken,
		arg.AccessTokenExpiresAt,
		arg.UserID,
		arg.ProviderID,
	)
	return err
}

const updateAccountPassword = `-- name: UpdateAccountPassword :exec
UPDATE accounts SET password = ? WHERE id = ?
`

type UpdateAccountPasswordParams struct {
	Password sql.NullString
	ID       int64
}

func (q *Queries) UpdateAccountPassword(ctx context.Context, arg UpdateAccountPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateAccountPassword, arg.Password, arg.ID)
	return err
}
