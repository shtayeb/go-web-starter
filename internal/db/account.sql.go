// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: account.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const changeAccountPassword = `-- name: ChangeAccountPassword :exec
UPDATE accounts SET password = $1 WHERE id = $2
`

type ChangeAccountPasswordParams struct {
	Password pgtype.Text
	ID       int32
}

func (q *Queries) ChangeAccountPassword(ctx context.Context, arg ChangeAccountPasswordParams) error {
	_, err := q.db.Exec(ctx, changeAccountPassword, arg.Password, arg.ID)
	return err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (account_id, user_id, password, provider_id)
VALUES ( $1, $2, $3, $4)
RETURNING id, account_id, provider_id, user_id, access_token, refresh_token, id_token, access_token_expires_at, refresh_token_expires_at, scope, password, created_at, updated_at
`

type CreateAccountParams struct {
	AccountID  string
	UserID     int32
	Password   pgtype.Text
	ProviderID pgtype.Text
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.AccountID,
		arg.UserID,
		arg.Password,
		arg.ProviderID,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.ProviderID,
		&i.UserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.IDToken,
		&i.AccessTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.Scope,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountById = `-- name: GetAccountById :one
SELECT id, account_id, provider_id, user_id, access_token, refresh_token, id_token, access_token_expires_at, refresh_token_expires_at, scope, password, created_at, updated_at FROM accounts WHERE id = $1
`

func (q *Queries) GetAccountById(ctx context.Context, id int32) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountById, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.ProviderID,
		&i.UserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.IDToken,
		&i.AccessTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.Scope,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountByUserId = `-- name: GetAccountByUserId :one
SELECT id, account_id, provider_id, user_id, access_token, refresh_token, id_token, access_token_expires_at, refresh_token_expires_at, scope, password, created_at, updated_at FROM accounts WHERE user_id = $1
`

func (q *Queries) GetAccountByUserId(ctx context.Context, userID int32) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByUserId, userID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.ProviderID,
		&i.UserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.IDToken,
		&i.AccessTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.Scope,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountByUserIdAndProvider = `-- name: GetAccountByUserIdAndProvider :one
SELECT id, account_id, provider_id, user_id, access_token, refresh_token, id_token, access_token_expires_at, refresh_token_expires_at, scope, password, created_at, updated_at FROM accounts
WHERE user_id = $1 AND provider_id = $2
`

type GetAccountByUserIdAndProviderParams struct {
	UserID     int32
	ProviderID pgtype.Text
}

func (q *Queries) GetAccountByUserIdAndProvider(ctx context.Context, arg GetAccountByUserIdAndProviderParams) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByUserIdAndProvider, arg.UserID, arg.ProviderID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.ProviderID,
		&i.UserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.IDToken,
		&i.AccessTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.Scope,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAccountOAuthTokens = `-- name: UpdateAccountOAuthTokens :exec
UPDATE accounts 
SET access_token = $1, 
    refresh_token = $2, 
    access_token_expires_at = $3
WHERE user_id = $4 AND provider_id = $5
`

type UpdateAccountOAuthTokensParams struct {
	AccessToken          pgtype.Text
	RefreshToken         pgtype.Text
	AccessTokenExpiresAt pgtype.Timestamp
	UserID               int32
	ProviderID           pgtype.Text
}

func (q *Queries) UpdateAccountOAuthTokens(ctx context.Context, arg UpdateAccountOAuthTokensParams) error {
	_, err := q.db.Exec(ctx, updateAccountOAuthTokens,
		arg.AccessToken,
		arg.RefreshToken,
		arg.AccessTokenExpiresAt,
		arg.UserID,
		arg.ProviderID,
	)
	return err
}

const updateAccountPassword = `-- name: UpdateAccountPassword :exec
UPDATE accounts SET password = $1 WHERE id = $2
`

type UpdateAccountPasswordParams struct {
	Password pgtype.Text
	ID       int32
}

func (q *Queries) UpdateAccountPassword(ctx context.Context, arg UpdateAccountPasswordParams) error {
	_, err := q.db.Exec(ctx, updateAccountPassword, arg.Password, arg.ID)
	return err
}
