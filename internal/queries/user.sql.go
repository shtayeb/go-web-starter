// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package queries

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name,email,email_verified,image)
VALUES ($1, $2, $3,$4) RETURNING id, name, email, email_verified, image, created_at, updated_at
`

type CreateUserParams struct {
	Name          string
	Email         string
	EmailVerified bool
	Image         sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.EmailVerified,
		arg.Image,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.EmailVerified,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, email_verified, image, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.EmailVerified,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, email, email_verified, image, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.EmailVerified,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByToken = `-- name: GetUserByToken :one
SELECT 
    users.id, users.name, users.email, users.email_verified, users.image, users.created_at, users.updated_at
FROM users
    INNER JOIN tokens ON users.id = tokens.user_id
WHERE tokens.hash = $1
    AND tokens.scope = $2
    AND tokens.expiry > $3
`

type GetUserByTokenParams struct {
	Hash   []byte
	Scope  string
	Expiry time.Time
}

type GetUserByTokenRow struct {
	User User
}

func (q *Queries) GetUserByToken(ctx context.Context, arg GetUserByTokenParams) (GetUserByTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByToken, arg.Hash, arg.Scope, arg.Expiry)
	var i GetUserByTokenRow
	err := row.Scan(
		&i.User.ID,
		&i.User.Name,
		&i.User.Email,
		&i.User.EmailVerified,
		&i.User.Image,
		&i.User.CreatedAt,
		&i.User.UpdatedAt,
	)
	return i, err
}

const updateUserNameAndImage = `-- name: UpdateUserNameAndImage :one
UPDATE users SET name = $1, image = $2 WHERE id = $3 RETURNING id, name, email, email_verified, image, created_at, updated_at
`

type UpdateUserNameAndImageParams struct {
	Name  string
	Image sql.NullString
	ID    int32
}

func (q *Queries) UpdateUserNameAndImage(ctx context.Context, arg UpdateUserNameAndImageParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserNameAndImage, arg.Name, arg.Image, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.EmailVerified,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
