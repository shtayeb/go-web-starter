// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: account.sql

package queries

import (
	"context"
	"database/sql"
	"time"
)

const changeAccountPassword = `-- name: ChangeAccountPassword :exec
UPDATE account SET password = ? WHERE id = ?
`

type ChangeAccountPasswordParams struct {
	Password sql.NullString
	ID       int64
}

func (q *Queries) ChangeAccountPassword(ctx context.Context, arg ChangeAccountPasswordParams) error {
	_, err := q.db.ExecContext(ctx, changeAccountPassword, arg.Password, arg.ID)
	return err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO account (account_id,user_id,password,created_at,updated_at)
VALUES ( ?, ?, ?, ?, ?)
RETURNING id, account_id, provider_id, user_id, access_token, refresh_token, id_token, access_token_expires_at, refresh_token_expires_at, scope, password, created_at, updated_at
`

type CreateAccountParams struct {
	AccountID string
	UserID    int64
	Password  sql.NullString
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.AccountID,
		arg.UserID,
		arg.Password,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.ProviderID,
		&i.UserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.IDToken,
		&i.AccessTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.Scope,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountById = `-- name: GetAccountById :one
SELECT id, account_id, provider_id, user_id, access_token, refresh_token, id_token, access_token_expires_at, refresh_token_expires_at, scope, password, created_at, updated_at FROM account WHERE id = ?
`

func (q *Queries) GetAccountById(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountById, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.ProviderID,
		&i.UserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.IDToken,
		&i.AccessTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.Scope,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountByUserId = `-- name: GetAccountByUserId :one
SELECT id, account_id, provider_id, user_id, access_token, refresh_token, id_token, access_token_expires_at, refresh_token_expires_at, scope, password, created_at, updated_at FROM account WHERE user_id=?
`

func (q *Queries) GetAccountByUserId(ctx context.Context, userID int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByUserId, userID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.ProviderID,
		&i.UserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.IDToken,
		&i.AccessTokenExpiresAt,
		&i.RefreshTokenExpiresAt,
		&i.Scope,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
