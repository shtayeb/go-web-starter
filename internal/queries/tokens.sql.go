// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tokens.sql

package queries

import (
	"context"
	"time"
)

const createToken = `-- name: CreateToken :one
INSERT INTO tokens (hash,user_id,expiry,scope) VALUES ($1,$2,$3,$4) RETURNING hash, user_id, expiry, scope
`

type CreateTokenParams struct {
	Hash   []byte
	UserID int64
	Expiry time.Time
	Scope  string
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, createToken,
		arg.Hash,
		arg.UserID,
		arg.Expiry,
		arg.Scope,
	)
	var i Token
	err := row.Scan(
		&i.Hash,
		&i.UserID,
		&i.Expiry,
		&i.Scope,
	)
	return i, err
}

const deleteAllForUser = `-- name: DeleteAllForUser :exec
DELETE FROM tokens WHERE scope = $1 AND user_id = $2
`

type DeleteAllForUserParams struct {
	Scope  string
	UserID int64
}

func (q *Queries) DeleteAllForUser(ctx context.Context, arg DeleteAllForUserParams) error {
	_, err := q.db.ExecContext(ctx, deleteAllForUser, arg.Scope, arg.UserID)
	return err
}

const getTokensForUser = `-- name: GetTokensForUser :one
SELECT hash, user_id, expiry, scope FROM tokens WHERE user_id = $1
`

func (q *Queries) GetTokensForUser(ctx context.Context, userID int64) (Token, error) {
	row := q.db.QueryRowContext(ctx, getTokensForUser, userID)
	var i Token
	err := row.Scan(
		&i.Hash,
		&i.UserID,
		&i.Expiry,
		&i.Scope,
	)
	return i, err
}
