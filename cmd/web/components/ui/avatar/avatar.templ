// templui component avatar - version: v0.96.0 installed by templui v0.96.0
package avatar

import (
	"fmt"
	"go-web-starter/cmd/web/utils"
)

type Size string
type GroupSpacing string

const (
	SizeSm Size = "sm"
	SizeMd Size = "md"
	SizeLg Size = "lg"
)

const (
	GroupSpacingSm GroupSpacing = "sm"
	GroupSpacingMd GroupSpacing = "md"
	GroupSpacingLg GroupSpacing = "lg"
)

type Props struct {
	ID         string
	Class      string
	Attributes templ.Attributes
	Size       Size
	InGroup    bool
}

type ImageProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
	Alt        string
	Src        string
}

type FallbackProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type GroupProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
	Spacing    GroupSpacing
}

templ Avatar(props ...Props) {
	{{ var p Props }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		data-tui-avatar
		if p.ID != "" {
			id={ p.ID }
		}
		class={
			utils.TwMerge(
				"relative inline-flex shrink-0 items-center justify-center overflow-hidden",
				// Default size (md) - will be overridden if Size prop is set or Class contains size utilities
				"size-12 text-base",
				// Size variants with data attributes
				"data-[tui-avatar-size=sm]:size-8 data-[tui-avatar-size=sm]:text-xs",
				"data-[tui-avatar-size=md]:size-12 data-[tui-avatar-size=md]:text-base",
				"data-[tui-avatar-size=lg]:size-16 data-[tui-avatar-size=lg]:text-xl",
				"rounded-full bg-muted",
				// In-group state with data attributes
				"data-[tui-avatar-in-group=true]:ring-2 data-[tui-avatar-in-group=true]:ring-background",
				p.Class,
			),
		}
		if p.Size != "" {
			data-tui-avatar-size={ string(p.Size) }
		}
		if p.InGroup {
			data-tui-avatar-in-group="true"
		}
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

templ Image(props ...ImageProps) {
	{{ var p ImageProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<img
		data-tui-avatar-image
		if p.ID != "" {
			id={ p.ID }
		}
		if p.Src != "" {
			src={ p.Src }
		}
		alt={ p.Alt }
		class={
			utils.TwMerge(
				"absolute inset-0 w-full h-full",
				"object-cover",
				"z-10",
				p.Class,
			),
		}
		{ p.Attributes... }
	/>
}

templ Fallback(props ...FallbackProps) {
	{{ var p FallbackProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<span
		data-tui-avatar-fallback
		if p.ID != "" {
			id={ p.ID }
		}
		class={
			utils.TwMerge(
				"font-medium text-muted-foreground",
				p.Class,
			),
		}
		{ p.Attributes... }
	>
		{ children... }
	</span>
}

templ Group(props ...GroupProps) {
	{{ var p GroupProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	// Set default spacing if not provided
	if p.Spacing == "" {
		{{ p.Spacing = GroupSpacingMd }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={
			utils.TwMerge(
				"flex items-center",
				// Spacing with data attributes
				"data-[tui-avatar-spacing=sm]:-space-x-1",
				"data-[tui-avatar-spacing=md]:-space-x-2",
				"data-[tui-avatar-spacing=lg]:-space-x-4",
				p.Class,
			),
		}
		data-tui-avatar-spacing={ string(p.Spacing) }
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

templ GroupOverflow(count int, props ...Props) {
	{{ var p Props }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={
			utils.TwMerge(
				"inline-flex items-center justify-center",
				// Default size (md)
				"w-12 h-12 text-base",
				// Size variants with data attributes
				"data-[tui-avatar-size=sm]:w-8 data-[tui-avatar-size=sm]:h-8 data-[tui-avatar-size=sm]:text-xs",
				"data-[tui-avatar-size=md]:w-12 data-[tui-avatar-size=md]:h-12 data-[tui-avatar-size=md]:text-base",
				"data-[tui-avatar-size=lg]:w-16 data-[tui-avatar-size=lg]:h-16 data-[tui-avatar-size=lg]:text-xl",
				"rounded-full bg-muted ring-2 ring-background",
				p.Class,
			),
		}
		if p.Size != "" {
			data-tui-avatar-size={ string(p.Size) }
		}
		{ p.Attributes... }
	>
		<span class="text-xs font-medium">+{ fmt.Sprint(count) }</span>
	</div>
}

templ Script() {
	<script defer nonce={ templ.GetNonce(ctx) } src="assets/js/ui/avatar.min.js"></script>
}
