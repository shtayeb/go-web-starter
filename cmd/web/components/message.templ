package components

import (
	"go-htmx-sqlite/cmd/web/components/ui/alert"
	"go-htmx-sqlite/internal/forms"
)

templ FormMessage(message *forms.Message) {
	<div class="form-message mb-4">
		@alert.Alert(alert.Props{
			Class:   "text-center transition-opacity duration-500 " + getMessageClasses(message.Type),
			Variant: getMessageVariant(message.Type),
		}) {
			@alert.Description() {
				{ message.Text }
			}
		}
	</div>
}

templ AutoDismissFormMessage(message *forms.Message, dismissAfter int) {
	<div class="form-message mb-4" id="auto-dismiss-message">
		@alert.Alert(alert.Props{
			Class:   "text-center transition-opacity duration-500 " + getMessageClasses(message.Type),
			Variant: getMessageVariant(message.Type),
		}) {
			@alert.Description() {
				{ message.Text }
			}
		}
		<script>
               setTimeout(() => {
                   const messageEl = document.getElementById('auto-dismiss-message');
                   if (messageEl) {
                       messageEl.style.opacity = '0';
                       setTimeout(() => messageEl.remove(), 500);
                   }
               }, { dismissAfter });
           </script>
	</div>
}

func getMessageClasses(msgType forms.MessageType) string {
	switch msgType {
	case forms.MessageTypeSuccess:
		return "bg-green-50 border-green-200 text-green-800"
	case forms.MessageTypeError:
		return "bg-red-50 border-red-200 text-red-800"
	case forms.MessageTypeWarning:
		return "bg-yellow-50 border-yellow-200 text-yellow-800"
	case forms.MessageTypeInfo:
		return "bg-blue-50 border-blue-200 text-blue-800"
	default:
		return "bg-green-50 border-green-200 text-green-800"
	}

}

func getMessageVariant(msgType forms.MessageType) alert.Variant {
	if msgType == forms.MessageTypeError {
		return alert.VariantDestructive
	}
	return alert.VariantDefault
}
