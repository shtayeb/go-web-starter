package components

import (
	"fmt"
	"go-web-starter/cmd/web/components/ui/alert"
	"go-web-starter/internal/forms"
	"math/rand"
	"time"
)

templ FormMessage(message *forms.Message) {
	<div class="form-message mb-4">
		@alert.Alert(alert.Props{
			Class:   "text-center transition-opacity duration-500 " + getMessageClasses(message.Type),
			Variant: getMessageVariant(message.Type),
		}) {
			@alert.Description() {
				{ message.Text }
			}
		}
	</div>
}

var msgDismissHandle = templ.NewOnceHandle()

// generateUniqueID creates a unique identifier for message instances
func generateUniqueID() string {
	return fmt.Sprintf("auto-dismiss-message-%d-%d", time.Now().UnixNano(), rand.Intn(10000))
}

// validateDismissAfter ensures the dismissAfter parameter is within safe bounds
func validateDismissAfter(dismissAfter int) int {
	if dismissAfter < 0 {
		return 3000 // Default to 3 seconds if negative
	}
	if dismissAfter > 30000 {
		return 30000 // Cap at 30 seconds for security
	}
	return dismissAfter
}

templ AutoDismissFormMessage(message *forms.Message, dismissAfter int) {
	{{ var uniqueID string }}
	{{ uniqueID = generateUniqueID() }}
	<div class="form-message mb-4" id={ uniqueID }>
		@alert.Alert(alert.Props{
			Class:   "text-center transition-opacity duration-500 " + getMessageClasses(message.Type),
			Variant: getMessageVariant(message.Type),
		}) {
			@alert.Description() {
				{ message.Text }
			}
		}
		@msgDismissHandle.Once() {
			<script>
                setTimeout(() => {
                    const messageEl = document.getElementById('{{ uniqueID }}');
                    if (messageEl) {
                        messageEl.style.opacity = '0';
                        setTimeout(() => messageEl.remove(), 500);
                    }
                }, {{ validateDismissAfter(dismissAfter) }} );
            </script>
		}
	</div>
}

func getMessageClasses(msgType forms.MessageType) string {
	switch msgType {
	case forms.MessageTypeSuccess:
		return "bg-green-50 border-green-200 text-green-800"
	case forms.MessageTypeError:
		return "bg-red-50 border-red-200 text-red-800"
	case forms.MessageTypeWarning:
		return "bg-yellow-50 border-yellow-200 text-yellow-800"
	case forms.MessageTypeInfo:
		return "bg-blue-50 border-blue-200 text-blue-800"
	default:
		return "bg-green-50 border-green-200 text-green-800"
	}

}

func getMessageVariant(msgType forms.MessageType) alert.Variant {
	if msgType == forms.MessageTypeError {
		return alert.VariantDestructive
	}
	return alert.VariantDefault
}
