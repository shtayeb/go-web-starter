package components

import "go-web-starter/cmd/web/components/ui/icon"
import "go-web-starter/cmd/web/components/ui/dropdown"
import "go-web-starter/cmd/web/components/ui/avatar"
import "go-web-starter/cmd/web/components/ui/button"
import "go-web-starter/internal/types"

templ LogoutForm(csrfToken string) {
	<form method="post" action="/logout">
		@CSRFInput(csrfToken)
		@button.Button(button.Props{
			Class:   "flex gap-2 items-center",
			Variant: button.VariantSecondary,
			Type:    button.TypeSubmit,
		}) {
			@icon.LogOut()
			Logout
		}
	</form>
}

templ UserDropdown(data types.TemplateData) {
	// display login button when user is not logged in
	if !data.IsAuthenticated {
		<a href="/login">
			@button.Button(button.Props{
				Class:   "flex gap-2 items-center",
				Variant: button.VariantSecondary,
			}) {
				// Default icon size in @button is 16x16
				// Use Class: "size-6" for larger icons
				@icon.LogIn()
				Login 
			}
		</a>
	} else {
		// When user is logged in
		@dropdown.Dropdown() {
			@dropdown.Trigger() {
				@avatar.Avatar(avatar.Props{
					Size: avatar.SizeSm,
				}) {
					if data.User.Image.Valid {
						@avatar.Image(avatar.ImageProps{
							Src: data.User.Image.String,
						})
					} else {
						@avatar.Fallback() {
							{ avatar.Initials(data.User.Name) }
						}
					}
				}
			}
			@dropdown.Content(dropdown.ContentProps{
				Width: "w-56",
			}) {
				@dropdown.Label() {
					<p class="font-medium">{ data.User.Name }</p>
					<p class="text-sm text-muted-foreground">{ data.User.Email }</p>
				}
				@dropdown.Separator()
				@dropdown.Group() {
					@dropdown.Item(dropdown.ItemProps{
						Href: "/profile",
					}) {
						<span class="flex items-center">
							@icon.User(icon.Props{Size: 16, Class: "mr-2"})
							My Account
						</span>
					}
				}
				@dropdown.Separator()
				@LogoutForm(data.CSRFToken)
			}
		}
	}
}
