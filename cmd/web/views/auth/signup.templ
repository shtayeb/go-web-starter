package auth

import "go-web-starter/cmd/web/components/ui/card"
import "go-web-starter/cmd/web/components/ui/form"
import "go-web-starter/cmd/web/components/ui/input"
import "go-web-starter/cmd/web/components/ui/button"
import "go-web-starter/cmd/web/layouts"
import "go-web-starter/internal/types"
import "go-web-starter/cmd/web/components/ui/separator"
import "go-web-starter/cmd/web/components/ui/icon"
import "go-web-starter/internal/forms"
import "go-web-starter/cmd/web/components"


templ SignUpView(data types.TemplateData, signUpForm forms.UserSignUpForm) {
	@layouts.AuthLayout(data) {
		<div class="w-full max-w-sm">
			@card.Card() {
				@card.Header(card.HeaderProps{
					Class: "text-center",
				}) {
					@card.Title(card.TitleProps{
						Class: "text-xl tracking-wider",
					}) {
						Create Account	
					}
					@card.Description() {
						Create your account to start using the application
					}
				}
				@card.Content(card.ContentProps{
					Class: "flex flex-col gap-4",
				}) {
					@LoginWithGoogle(data)
					@separator.Separator(separator.Props{
						Class: "w-full",
					}) {
						Or continue with
					}
					@SignUpForm(data, signUpForm)
				}
				@card.Footer(card.FooterProps{
					Class: "flex-col gap-8",
				}) {
					<p class="text-sm">
						Already have an account? 
						<a href="/login" class="text-blue-500 hover:underline">login</a>
					</p>
				}
			}
		</div>
	}
}

templ LoginWithGoogle(data types.TemplateData) {
	<form method="get" action="/auth/google" class="w-full">
		@components.CSRFInput(data.CSRFToken)
		@button.Button(button.Props{
			Class:   "flex gap-2 items-center w-full",
			Variant: button.VariantSecondary,
			Type:    button.TypeSubmit,
		}) {
			@icon.Mail()
			Create with Google
		}
	</form>
}

templ SignUpForm(data types.TemplateData, signUpForm forms.UserSignUpForm) {
	<form
		action="/signup"
		method="post"
		hx-post="/signup"
		hx-target="this"
		hx-swap="innerHTML"
		hx-indicator="#signup-spinner"
		class="space-y-2"
	>
		if signUpForm.HasMessage() {
			@components.AutoDismissFormMessage(signUpForm.Message, 3000)
		}
		@components.CSRFInput(data.CSRFToken)
		<div class="w-full max-w-sm grid gap-2">
			@form.Item() {
				@form.Label(form.LabelProps{
					For: "name",
				}) {
					Name	
				}
				@input.Input(input.Props{
					Name:        "name",
					ID:          "name",
					Type:        input.TypeText,
					Placeholder: "John Doe",
					Value:       signUpForm.Name,
					HasError:    signUpForm.FieldErrors["name"] != "",
					Required:    true,
				})
				@form.Message(form.MessageProps{
					Variant: form.MessageVariantError,
				}) {
					{ signUpForm.FieldErrors["name"] }
				}
			}
			@form.Item() {
				@form.Label(form.LabelProps{
					For: "email",
				}) {
					Email
				}
				@input.Input(input.Props{
					Name:        "email",
					ID:          "email",
					Type:        input.TypeEmail,
					Placeholder: "m@example.com",
					HasError:    signUpForm.FieldErrors["email"] != "",
					Value:       signUpForm.Email,
					Required:    true,
				})
				@form.Message(form.MessageProps{
					Variant: form.MessageVariantError,
				}) {
					{ signUpForm.FieldErrors["email"] }
				}
			}
			@form.Item() {
				@form.Label(form.LabelProps{
					For: "password",
				}) {
					Password
				}
				@input.Input(input.Props{
					Name:     "password",
					ID:       "password",
					Type:     input.TypePassword,
					HasError: signUpForm.FieldErrors["password"] != "",
					Required: true,
				})
				@form.Message(form.MessageProps{
					Variant: form.MessageVariantError,
				}) {
					{ signUpForm.FieldErrors["password"] }
				}
			}
			@form.Item() {
				@form.Label(form.LabelProps{
					For: "confirm_password",
				}) {
					Confirm Password
				}
				@input.Input(input.Props{
					Name:     "confirm_password",
					ID:       "confirm_password",
					Type:     input.TypePassword,
					HasError: signUpForm.FieldErrors["confirm_password"] != "",
					Required: true,
				})
				@form.Message(form.MessageProps{
					Variant: form.MessageVariantError,
				}) {
					{ signUpForm.FieldErrors["confirm_password"] }
				}
			}
		</div>
		@button.Button(button.Props{
			Type:  button.TypeSubmit,
			Class: "w-full flex items-center justify-center gap-2",
		}) {
			<span id="signup-spinner" class="htmx-indicator">
				<svg class="animate-spin h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
					<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
					<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
				</svg>
			</span>
			Create	
		}
	</form>
}
