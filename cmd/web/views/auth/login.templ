package auth

import "go-htmx-sqlite/cmd/web/components/ui/card"
import "go-htmx-sqlite/cmd/web/components/ui/form"
import "go-htmx-sqlite/cmd/web/components/ui/input"
import "go-htmx-sqlite/cmd/web/components/ui/button"
import "go-htmx-sqlite/cmd/web/layouts"
import "go-htmx-sqlite/internal/types"
import "go-htmx-sqlite/cmd/web/components/ui/icon"
import "go-htmx-sqlite/cmd/web/components/ui/separator"
import "go-htmx-sqlite/internal/forms"
import "go-htmx-sqlite/cmd/web/components"

templ LoginView(data types.TemplateData, loginForm forms.UserLoginForm) {
	@layouts.AuthLayout(data) {
		<div class="w-full max-w-sm">
			@card.Card() {
				@card.Header(card.HeaderProps{
					Class: "text-center",
				}) {
					@card.Title(card.TitleProps{
						Class: "text-xl font-bold tracking-wider",
					}) {
						Login
					}
					@card.Description() {
						Login to start using the application
					}
				}
				@card.Content(card.ContentProps{
					Class: "flex flex-col gap-4",
				}) {
					<div id="form-messages"></div>
					<form method="get" action="/auth/google" class="w-full">
						// @CSRFInput(data.CSRFToken)
						@button.Button(button.Props{
							Class:   "flex gap-2 items-center w-full",
							Variant: button.VariantSecondary,
							Type:    button.TypeSubmit,
						}) {
							@icon.Mail()
							Login with Google
						}
					</form>
					@separator.Separator(separator.Props{
						Class: "w-full",
					}) {
						Or continue with
					}
					<form
						method="post"
						action="/login"
						hx-post="/login"
						hx-target="#form-messages"
						hx-swap="innerHTML"
						hx-indicator="#login-spinner"
					>
						@components.CSRFInput(data.CSRFToken)
							<div class="w-full max-w-sm grid gap-2">
								@form.Item() {
									@form.Label(form.LabelProps{
										For: "email-form",
									}) {
										Email
									}
									@input.Input(input.Props{
										Name:        "email",
										ID:          "email-form",
										Type:        input.TypeEmail,
										Placeholder: "m@example.com",
									})
									<div id="error-email" class="text-sm text-red-600 dark:text-red-400 mt-1 hidden"></div>
								}
								@form.Item() {
									@form.Label(form.LabelProps{
										For: "password",
									}) {
										Password
									}
									@input.Input(input.Props{
										Name: "password",
										ID:   "password",
										Type: input.TypePassword,
									})
									<div id="error-password" class="text-sm text-red-600 dark:text-red-400 mt-1 hidden"></div>
								}
								<p class="text-sm">
									<a href="/forgot-password" class="align-right hover:underline">Forgot your password?</a>
								</p>
								@button.Button(button.Props{
									Type:  button.TypeSubmit,
									Class: "w-full flex items-center justify-center gap-2",
								}) {
									<span id="login-spinner" class="htmx-indicator">
										<svg class="animate-spin h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
											<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
											<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
										</svg>
									</span>
									Login 
								}
							</div>
						
					</form>
				}
				@card.Footer(card.FooterProps{
					Class: "flex flex-col gap-8",
				}) {
					<p class="text-sm">
						Don't have an account? 
						<a href="/signup" class="text-blue-500 hover:underline">Sign up</a>
					</p>
				}
			}
		</div>
	}
}
